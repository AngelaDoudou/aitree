/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef segment_TYPES_H
#define segment_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace Article {

class InvalidRequest;

class SegWord;

typedef struct _InvalidRequest__isset {
  _InvalidRequest__isset() : reason(false) {}
  bool reason :1;
} _InvalidRequest__isset;

class InvalidRequest : public ::apache::thrift::TException {
 public:

  InvalidRequest(const InvalidRequest&);
  InvalidRequest& operator=(const InvalidRequest&);
  InvalidRequest() : reason() {
  }

  virtual ~InvalidRequest() throw();
  std::string reason;

  _InvalidRequest__isset __isset;

  void __set_reason(const std::string& val);

  bool operator == (const InvalidRequest & rhs) const
  {
    if (!(reason == rhs.reason))
      return false;
    return true;
  }
  bool operator != (const InvalidRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const InvalidRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(InvalidRequest &a, InvalidRequest &b);

inline std::ostream& operator<<(std::ostream& out, const InvalidRequest& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _SegWord__isset {
  _SegWord__isset() : word(false), weight(false) {}
  bool word :1;
  bool weight :1;
} _SegWord__isset;

class SegWord : public virtual ::apache::thrift::TBase {
 public:

  SegWord(const SegWord&);
  SegWord& operator=(const SegWord&);
  SegWord() : word(), weight(0) {
  }
  SegWord(const std::string key, const double wgt) : word(key), weight(wgt) { 
  }

  virtual ~SegWord() throw();
  std::string word;
  double weight;

  _SegWord__isset __isset;

  void __set_word(const std::string& val);

  void __set_weight(const double val);

  bool operator == (const SegWord & rhs) const
  {
    if (!(word == rhs.word))
      return false;
    if (!(weight == rhs.weight))
      return false;
    return true;
  }
  bool operator != (const SegWord &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SegWord & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SegWord &a, SegWord &b);

inline std::ostream& operator<<(std::ostream& out, const SegWord& obj)
{
  obj.printTo(out);
  return out;
}

} // namespace

#endif
