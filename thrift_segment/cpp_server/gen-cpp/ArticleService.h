/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ArticleService_H
#define ArticleService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "segment_types.h"

namespace Article {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ArticleServiceIf {
 public:
  virtual ~ArticleServiceIf() {}
  virtual void Segment(std::vector<SegWord> & _return, const std::string& sentence, const int32_t topk) = 0;
};

class ArticleServiceIfFactory {
 public:
  typedef ArticleServiceIf Handler;

  virtual ~ArticleServiceIfFactory() {}

  virtual ArticleServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ArticleServiceIf* /* handler */) = 0;
};

class ArticleServiceIfSingletonFactory : virtual public ArticleServiceIfFactory {
 public:
  ArticleServiceIfSingletonFactory(const boost::shared_ptr<ArticleServiceIf>& iface) : iface_(iface) {}
  virtual ~ArticleServiceIfSingletonFactory() {}

  virtual ArticleServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ArticleServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ArticleServiceIf> iface_;
};

class ArticleServiceNull : virtual public ArticleServiceIf {
 public:
  virtual ~ArticleServiceNull() {}
  void Segment(std::vector<SegWord> & /* _return */, const std::string& /* sentence */, const int32_t /* topk */) {
    return;
  }
};

typedef struct _ArticleService_Segment_args__isset {
  _ArticleService_Segment_args__isset() : sentence(false), topk(false) {}
  bool sentence :1;
  bool topk :1;
} _ArticleService_Segment_args__isset;

class ArticleService_Segment_args {
 public:

  ArticleService_Segment_args(const ArticleService_Segment_args&);
  ArticleService_Segment_args& operator=(const ArticleService_Segment_args&);
  ArticleService_Segment_args() : sentence(), topk(0) {
  }

  virtual ~ArticleService_Segment_args() throw();
  std::string sentence;
  int32_t topk;

  _ArticleService_Segment_args__isset __isset;

  void __set_sentence(const std::string& val);

  void __set_topk(const int32_t val);

  bool operator == (const ArticleService_Segment_args & rhs) const
  {
    if (!(sentence == rhs.sentence))
      return false;
    if (!(topk == rhs.topk))
      return false;
    return true;
  }
  bool operator != (const ArticleService_Segment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArticleService_Segment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ArticleService_Segment_pargs {
 public:


  virtual ~ArticleService_Segment_pargs() throw();
  const std::string* sentence;
  const int32_t* topk;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArticleService_Segment_result__isset {
  _ArticleService_Segment_result__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _ArticleService_Segment_result__isset;

class ArticleService_Segment_result {
 public:

  ArticleService_Segment_result(const ArticleService_Segment_result&);
  ArticleService_Segment_result& operator=(const ArticleService_Segment_result&);
  ArticleService_Segment_result() {
  }

  virtual ~ArticleService_Segment_result() throw();
  std::vector<SegWord>  success;
  InvalidRequest err;

  _ArticleService_Segment_result__isset __isset;

  void __set_success(const std::vector<SegWord> & val);

  void __set_err(const InvalidRequest& val);

  bool operator == (const ArticleService_Segment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ArticleService_Segment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ArticleService_Segment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ArticleService_Segment_presult__isset {
  _ArticleService_Segment_presult__isset() : success(false), err(false) {}
  bool success :1;
  bool err :1;
} _ArticleService_Segment_presult__isset;

class ArticleService_Segment_presult {
 public:


  virtual ~ArticleService_Segment_presult() throw();
  std::vector<SegWord> * success;
  InvalidRequest err;

  _ArticleService_Segment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ArticleServiceClient : virtual public ArticleServiceIf {
 public:
  ArticleServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ArticleServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Segment(std::vector<SegWord> & _return, const std::string& sentence, const int32_t topk);
  void send_Segment(const std::string& sentence, const int32_t topk);
  void recv_Segment(std::vector<SegWord> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ArticleServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ArticleServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ArticleServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Segment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ArticleServiceProcessor(boost::shared_ptr<ArticleServiceIf> iface) :
    iface_(iface) {
    processMap_["Segment"] = &ArticleServiceProcessor::process_Segment;
  }

  virtual ~ArticleServiceProcessor() {}
};

class ArticleServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ArticleServiceProcessorFactory(const ::boost::shared_ptr< ArticleServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ArticleServiceIfFactory > handlerFactory_;
};

class ArticleServiceMultiface : virtual public ArticleServiceIf {
 public:
  ArticleServiceMultiface(std::vector<boost::shared_ptr<ArticleServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ArticleServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ArticleServiceIf> > ifaces_;
  ArticleServiceMultiface() {}
  void add(boost::shared_ptr<ArticleServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Segment(std::vector<SegWord> & _return, const std::string& sentence, const int32_t topk) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Segment(_return, sentence, topk);
    }
    ifaces_[i]->Segment(_return, sentence, topk);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ArticleServiceConcurrentClient : virtual public ArticleServiceIf {
 public:
  ArticleServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ArticleServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Segment(std::vector<SegWord> & _return, const std::string& sentence, const int32_t topk);
  int32_t send_Segment(const std::string& sentence, const int32_t topk);
  void recv_Segment(std::vector<SegWord> & _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
