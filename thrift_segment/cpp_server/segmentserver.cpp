// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "gen-cpp/ArticleService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include "alg_jieba.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::Article;

class ArticleServiceHandler : virtual public ArticleServiceIf {
    Alg_Jieba _alg_jieba;
 public:
  ArticleServiceHandler():_alg_jieba() {
    // Your initialization goes here
  }

  void Segment(std::vector<SegWord> & _return, const std::string& sentence, const int32_t topk) {
    // Your implementation goes here
    std::vector<Alg_Jieba::ResultKey> keys;
    _alg_jieba.segment(sentence, topk, keys);
    for(auto & k: keys){
        _return.push_back(SegWord(k.key, k.wgt));
    }
    //_return.push_back(SegWord(sentence, 0.58));
    //_return.push_back(SegWord("hello", 0.22));
    //_return.push_back(SegWord("world",0.2));
    printf("Segment done!\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  boost::shared_ptr<ArticleServiceHandler> handler(new ArticleServiceHandler());
  boost::shared_ptr<TProcessor> processor(new ArticleServiceProcessor(handler));
  boost::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  boost::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  boost::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

